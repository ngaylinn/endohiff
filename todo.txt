TODO:
- Audit remaining code for refactors:
  - Maybe have paper / supplemental versions of figures?
  - Better handling of default params (avoid parallel ti/np code)
  - Split environment sweep and bitstring sweep into separate processes
  - Refactor run_experiment to do one-off runs with sweep params
  - Generate additional samples where CPPN wins
  - Avoid inner / outer language and talk about bit strings / envs?
  - Use consistent formatting for "environment" and "bitstring" everywhere. Are they abbreviated?
  - Consider reorganizing code into bitstring / environment
  - Rename log files to avoid inner / outer
  - Sweep logs store env_name, but maybe remove it for consistency with other logs?
  - Capitalize 'fitness' in column names.
  - Store trial as an int column, not string?
  - Maybe remove remnants of supporting crossover?
  - Make baym variants by modifying baym
  - Maybe optimize outer_fitness?
  - Update Snakefile to re-run everything
  - Revise all comments and documentation
- Update README.md
- Update supp.md
  - Add outer fitnes chart
  - Add hiff / migration / skew visualizations
  - Add ratchet sweep visualization
- Rerun everything from scratch to make sure it still works
- Get a code review


Side tasks:
- Analyze skew
- Hiff diagram
- Migration diagram (maybe show a range of migration_rate values?)
- Baym variants
- Random CPPNs

Experiment tasks:
- Sweep environments
- Sweep bitstrings in static / evolved environments
- Capture samples / simulate evolution for single param settings

Visualization tasks:
- Env maps (static, CPPN samples, baym variants)
- Outer fitness chart

- Final fitness maps
- Fitness map animations
- Fitness over time (all envs, per env)

- Sweeps (absolute and relative)
- Histogram of sweep scores


visualize_environment
visualize_environment_fitness
visualize_bitstring_population
visualize_bitstring_fitness
visualize_sweep

sweep_environments
sweep_bitstrings

evolve_environment
evolve_bitstrings

extras
 - analyze_skew.py * 
 - copy_figures.py *
 - visualize_hiff.py *
 - visualize_migration.py *
 - missing_steps.py *
environments
 - evolve.py *
 + fitness.py
 + population.py
 + static.py
 - sweep.py *
 + visualize_one.py *
 + visualize_fitness.py *
bitstrings
 - evolve.py *
 - fitness.py
 - population.py
 - reproduction.py
 - sweep.py *
 + visualize_population.py *
 + visualize_fitness.py *
constants.py
graphics.py
sweep.py
